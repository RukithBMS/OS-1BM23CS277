#include <stdio.h>
#include <limits.h>

typedef struct {
    int pid, at, bt, wt, tat, remaining_bt;
} Process;

void calculateTimes(Process *p, int n) {
    int total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].bt + p[i].wt;
        total_wt += p[i].wt;
        total_tat += p[i].tat;
    }

    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].wt, p[i].tat);
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
}

void sjfNonPreemptive(Process *p, int n) {
    int current_time = 0, completed = 0;
    while (completed < n) {
        int idx = -1, min_bt = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= current_time && p[i].remaining_bt > 0 && p[i].remaining_bt < min_bt) {
                min_bt = p[i].remaining_bt;
                idx = i;
            }
        }
        if (idx != -1) {
            current_time += p[idx].remaining_bt;
            p[idx].wt = current_time - p[idx].at - p[idx].bt;
            p[idx].remaining_bt = 0;
            completed++;
        } else {
            current_time++;
        }
    }
    calculateTimes(p, n);
}

void sjfPreemptive(Process *p, int n) {
    int current_time = 0, completed = 0;
    while (completed < n) {
        int idx = -1, min_bt = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= current_time && p[i].remaining_bt > 0 && p[i].remaining_bt < min_bt) {
                min_bt = p[i].remaining_bt;
                idx = i;
            }
        }
        if (idx != -1) {
            p[idx].remaining_bt--;
            current_time++;
            if (p[idx].remaining_bt == 0) {
                p[idx].wt = current_time - p[idx].at - p[idx].bt;
                completed++;
            }
        } else {
            current_time++;
        }
    }
    calculateTimes(p, n);
}

int main() {
    int n, choice;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for Process %d: ", p[i].pid);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].remaining_bt = p[i].bt;
    }

    printf("Choose Scheduling Method:\n1. Non-Preemptive SJF\n2. Preemptive SJF\nEnter choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        sjfNonPreemptive(p, n);
    } else if (choice == 2) {
        sjfPreemptive(p, n);
    } else {
        printf("Invalid choice\n");
    }

    return 0;
}
