#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;
    int at;
    int bt;
    int priority;
    int wt;
    int tat;
    int remaining_bt;
} Process;

void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void calculateTimes(Process *p, int n) {
    int total_wt = 0, total_tat = 0;

    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].bt + p[i].wt;
        total_wt += p[i].wt;
        total_tat += p[i].tat;
    }

    printf("\nProcess\tAT\tBT\tPriority\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].priority, p[i].wt, p[i].tat);
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
}

void prioritySchedulingNonPreemptive(Process *p, int n) {
    int current_time = 0;
    int completed = 0;
    int isCompleted[n];

    for (int i = 0; i < n; i++) {
        isCompleted[i] = 0;
    }

    while (completed < n) {
        int idx = -1;
        int min_priority = 9999;

        for (int i = 0; i < n; i++) {
            if (!isCompleted[i] && p[i].at <= current_time && p[i].priority < min_priority) {
                min_priority = p[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            p[idx].wt = current_time - p[idx].at;
            current_time += p[idx].bt;
            isCompleted[idx] = 1;
            completed++;
        } else {
            current_time++;
        }
    }

    calculateTimes(p, n);
}

void prioritySchedulingPreemptive(Process *p, int n) {
    int current_time = 0;
    int completed = 0;
    int isCompleted[n];
    int prev_time[n];
    for (int i = 0; i < n; i++) {
        isCompleted[i] = 0;
        prev_time[i] = -1;
        p[i].remaining_bt = p[i].bt;
    }

    while (completed < n) {
        int idx = -1;
        int min_priority = 9999;

        for (int i = 0; i < n; i++) {
            if (!isCompleted[i] && p[i].at <= current_time && p[i].priority < min_priority) {
                min_priority = p[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            if (prev_time[idx] == -1) {
                p[idx].wt = current_time - p[idx].at;
            }
            prev_time[idx] = current_time;
            current_time++;
            p[idx].remaining_bt--;

            if (p[idx].remaining_bt == 0) {
                isCompleted[idx] = 1;
                completed++;
            }
        } else {
            current_time++;
        }
    }

    calculateTimes(p, n);
}

int main() {
    int n, choice;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time, Burst Time, and Priority for Process %d: ", p[i].pid);
        scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].priority);
    }

    printf("\nChoose scheduling method:\n1. Non-Preemptive\n2. Preemptive\nEnter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        prioritySchedulingNonPreemptive(p, n);
    } else if (choice == 2) {
        prioritySchedulingPreemptive(p, n);
    } else {
        printf("Invalid choice\n");
    }

    return 0;
}
