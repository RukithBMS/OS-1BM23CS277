#include <stdio.h>

typedef struct {
    int pid, at, bt, remaining_bt, wt, tat;
} Process;

void calculateTimes(Process *p, int n) {
    int total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        p[i].tat = p[i].bt + p[i].wt;
        total_wt += p[i].wt;
        total_tat += p[i].tat;
    }

    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].wt, p[i].tat);
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_tat / n);
}

void roundRobinScheduling(Process *p, int n, int quantum) {
    int current_time = 0, completed = 0;
    int remaining_processes = n;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (p[i].at <= current_time && p[i].remaining_bt > 0) {
                int time_to_run = (p[i].remaining_bt > quantum) ? quantum : p[i].remaining_bt;
                p[i].remaining_bt -= time_to_run;
                current_time += time_to_run;

                if (p[i].remaining_bt == 0 && p[i].wt == 0) {
                    p[i].wt = current_time - p[i].at - p[i].bt;
                    completed++;
                    remaining_processes--;
                }
            }
        }
        if (completed == n) {
            break;
        }
    }
    calculateTimes(p, n);
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time and Burst Time for Process %d: ", p[i].pid);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].remaining_bt = p[i].bt;
        p[i].wt = 0;  // Initialize waiting time to 0
    }

    printf("Enter Quantum Time: ");
    scanf("%d", &quantum);

    roundRobinScheduling(p, n, quantum);
    return 0;
}
